// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Company {
  id Int @id @default(autoincrement())
  name String?
  email String @unique
  password String
  phone String? @unique
  address String?
  city String?
  state String?
  jobs Job[]
  createdAt DateTime @default(now()) 
  updatedAt DateTime? @updatedAt
}

model College {
  id Int @id @default(autoincrement())
  email String @unique
  password String
  name String?
  phone String? @unique 
  address String?
  city String?
  state String?
  pincode String?
  aicte_id String? @unique
  students Student[]
  jobs Job[]
  applieds Applied[]
  createdAt DateTime @default(now()) 
  updatedAt DateTime? @updatedAt
}

model Student {
  id Int @id @default(autoincrement())
  rollNo String? @unique
  email String @unique
  password String
  phone String? @unique
  firstName String?
  lastName String?
  clgAcademics String?
  twelveGrade String?
  tenthGrade String?
  branch String?
  approved Boolean? @default(false)
  college College? @relation(fields: [collegeId], references: [id])
  collegeId Int?
  applieds Applied[]
  createdAt DateTime @default(now()) 
  updatedAt DateTime? @updatedAt
}

model Job {
  id Int @id @default(autoincrement())
  post String 
  description String
  salary String
  grade String?
  twelthGrade String?
  tenthGrade String?
  process String?
  company Company @relation(fields: [companyId], references: [id])
  companyId Int
  college College @relation(fields: [collegeId],references: [id])
  collegeId Int
  applicants Applied[]
  createdAt DateTime @default(now()) 
  updatedAt DateTime? @updatedAt
}

model Applied{
  id Int @id @default(autoincrement())
  student Student @relation(fields: [studentId],references: [id])
  studentId Int
  college College @relation(fields: [collegeId],references: [id])
  collegeId Int
  job Job @relation(fields: [jobId],references: [id])
  jobId Int
  status STATUS @default(REVIEW)
}

enum STATUS {
  ACCEPTED
  REJECTED
  REVIEW
}